//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tester.DNSService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DNSConfiguration", Namespace="http://schemas.datacontract.org/2004/07/theDiary.EasyDNS.Windows.Service")]
    [System.SerializableAttribute()]
    public partial class DNSConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress PrimaryDNSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress SecondaryDNSField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress PrimaryDNS {
            get {
                return this.PrimaryDNSField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryDNSField, value) != true)) {
                    this.PrimaryDNSField = value;
                    this.RaisePropertyChanged("PrimaryDNS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress SecondaryDNS {
            get {
                return this.SecondaryDNSField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondaryDNSField, value) != true)) {
                    this.SecondaryDNSField = value;
                    this.RaisePropertyChanged("SecondaryDNS");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultOfDNSConfigurationo4iSXZRF", Namespace="http://schemas.datacontract.org/2004/07/theDiary.EasyDNS.Windows.Service")]
    [System.SerializableAttribute()]
    public partial class OperationResultOfDNSConfigurationo4iSXZRF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Tester.DNSService.DNSConfiguration ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Tester.DNSService.DNSConfiguration Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkAdapterInfo", Namespace="http://schemas.datacontract.org/2004/07/theDiary.EasyDNS.Windows.Service")]
    [System.SerializableAttribute()]
    public partial class NetworkAdapterInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress IPAddressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DNSService.IDNSService")]
    public interface IDNSService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDNSService/ChangeDNS", ReplyAction="http://tempuri.org/IDNSService/ChangeDNSResponse")]
        Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF ChangeDNS(Tester.DNSService.DNSConfiguration newConfiguration, string deviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDNSService/ChangeDNS", ReplyAction="http://tempuri.org/IDNSService/ChangeDNSResponse")]
        System.Threading.Tasks.Task<Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF> ChangeDNSAsync(Tester.DNSService.DNSConfiguration newConfiguration, string deviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDNSService/GetDNSConfiguration", ReplyAction="http://tempuri.org/IDNSService/GetDNSConfigurationResponse")]
        Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF GetDNSConfiguration(string deviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDNSService/GetDNSConfiguration", ReplyAction="http://tempuri.org/IDNSService/GetDNSConfigurationResponse")]
        System.Threading.Tasks.Task<Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF> GetDNSConfigurationAsync(string deviceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDNSService/GetNetworkAdapters", ReplyAction="http://tempuri.org/IDNSService/GetNetworkAdaptersResponse")]
        System.Collections.Generic.List<Tester.DNSService.NetworkAdapterInfo> GetNetworkAdapters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDNSService/GetNetworkAdapters", ReplyAction="http://tempuri.org/IDNSService/GetNetworkAdaptersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Tester.DNSService.NetworkAdapterInfo>> GetNetworkAdaptersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDNSServiceChannel : Tester.DNSService.IDNSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DNSServiceClient : System.ServiceModel.ClientBase<Tester.DNSService.IDNSService>, Tester.DNSService.IDNSService {
        
        public DNSServiceClient() {
        }
        
        public DNSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DNSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DNSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DNSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF ChangeDNS(Tester.DNSService.DNSConfiguration newConfiguration, string deviceName) {
            return base.Channel.ChangeDNS(newConfiguration, deviceName);
        }
        
        public System.Threading.Tasks.Task<Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF> ChangeDNSAsync(Tester.DNSService.DNSConfiguration newConfiguration, string deviceName) {
            return base.Channel.ChangeDNSAsync(newConfiguration, deviceName);
        }
        
        public Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF GetDNSConfiguration(string deviceName) {
            return base.Channel.GetDNSConfiguration(deviceName);
        }
        
        public System.Threading.Tasks.Task<Tester.DNSService.OperationResultOfDNSConfigurationo4iSXZRF> GetDNSConfigurationAsync(string deviceName) {
            return base.Channel.GetDNSConfigurationAsync(deviceName);
        }
        
        public System.Collections.Generic.List<Tester.DNSService.NetworkAdapterInfo> GetNetworkAdapters() {
            return base.Channel.GetNetworkAdapters();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Tester.DNSService.NetworkAdapterInfo>> GetNetworkAdaptersAsync() {
            return base.Channel.GetNetworkAdaptersAsync();
        }
    }
}
